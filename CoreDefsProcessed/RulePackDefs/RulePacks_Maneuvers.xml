<?xml version="1.0" encoding="utf-8"?>
<Defs>
  <RulePackDef>
    <defName>Maneuver_Slash</defName>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">damaged_inf(p=4)->slash</li>
        <li ListIndex="1">damaged_inf->cut</li>
        <li ListIndex="2">damaged_inf->chop</li>
        <li ListIndex="3">damaged_inf->hack</li>
        <li ListIndex="4">damaged_inf->slice</li>
        <li ListIndex="5">damaged_inf->gash</li>
        <li ListIndex="6">damaged_past(p=4)->slashed</li>
        <li ListIndex="7">damaged_past->cut</li>
        <li ListIndex="8">damaged_past->chopped</li>
        <li ListIndex="9">damaged_past->hacked</li>
        <li ListIndex="10">damaged_past->sliced</li>
        <li ListIndex="11">damaged_past->gashed</li>
        <li ListIndex="12">damaged_present->slashing</li>
        <li ListIndex="13">damaged_present->cutting</li>
        <li ListIndex="14">damaged_present->slicing</li>
        <li ListIndex="15">damaged_present->gashing</li>
        <li ListIndex="16">damaged_present->tearing</li>
        <li ListIndex="17">damaged_present->lacerating</li>
        <li ListIndex="18">woundname->wound</li>
        <li ListIndex="19">woundname(p=0.3)->opening</li>
        <li ListIndex="20">flavortextsituation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
        <li ListIndex="21">flavortextsituation->with fluids dripping from the [woundname]</li>
        <li ListIndex="22">flavortextconsequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
        <li ListIndex="23">flavortextconsequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
        <li ListIndex="24">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving a gory [woundname]</li>
        <li ListIndex="25">destroyed_past->bisected</li>
        <li ListIndex="26">destroyed_past->divided</li>
        <li ListIndex="27">destroyed_past->halved</li>
        <li ListIndex="28">destroyed_past->separated</li>
        <li ListIndex="29">destroyed_past->split</li>
        <li ListIndex="30">destroyed_present->bisecting</li>
        <li ListIndex="31">destroyed_present->dividing</li>
        <li ListIndex="32">destroyed_present->halving</li>
        <li ListIndex="33">destroyed_present->separating</li>
        <li ListIndex="34">destroyed_present->splitting</li>
        <li ListIndex="35">destroyed_suffix->into neat pieces</li>
        <li ListIndex="36">destroyed_suffix->cleanly</li>
        <li ListIndex="37">destroyed_suffix(target_part_destroyed_count==1)->exposing its inner workings</li>
        <li ListIndex="38">destroyed_suffix(target_part_destroyed_count==1)->slicing it in twain</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Stab</defName>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">damaged_inf(p=4)->stab</li>
        <li ListIndex="1">damaged_inf->jab</li>
        <li ListIndex="2">damaged_inf->pierce</li>
        <li ListIndex="3">damaged_inf->puncture</li>
        <li ListIndex="4">damaged_inf->skewer</li>
        <!-- <li>damaged_inf->penetrate</li> Doesn't work well with "Jimmy avoided Lilith's gladius penetrate"; disabled for now -->
        <li ListIndex="5">damaged_past(p=4)->stabbed</li>
        <li ListIndex="6">damaged_past->jabbed</li>
        <li ListIndex="7">damaged_past->pierced</li>
        <li ListIndex="8">damaged_past->punctured</li>
        <li ListIndex="9">damaged_past->skewered</li>
        <li ListIndex="10">damaged_present->piercing</li>
        <li ListIndex="11">damaged_present->puncturing</li>
        <li ListIndex="12">damaged_present->penetrating</li>
        <li ListIndex="13">damaged_present->skewering</li>
        <li ListIndex="14">woundname->hole</li>
        <li ListIndex="15">woundname->wound</li>
        <li ListIndex="16">woundname->crevice</li>
        <li ListIndex="17">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving a bloody [woundname]</li>
        <li ListIndex="18">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving a torn [woundname]</li>
        <li ListIndex="19">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving a bleeding [woundname]</li>
        <li ListIndex="20">destroyed_past->impaled</li>
        <li ListIndex="21">destroyed_past->perforated</li>
        <li ListIndex="22">destroyed_past->skewered</li>
        <li ListIndex="23">destroyed_present->impaling</li>
        <li ListIndex="24">destroyed_present->perforating</li>
        <li ListIndex="25">destroyed_present->skewering</li>
        <li ListIndex="26">destroyed_suffix->straight through</li>
        <li ListIndex="27">destroyed_suffix->leaving a clean hole</li>
        <li ListIndex="28">destroyed_suffix(recipient_flesh!=Mechanoid,target_part_destroyed_count==1)->leaving it leaking gory fluids</li>
        <li ListIndex="29">destroyed_suffix(target_part_destroyed_count==1)->leaving it leaking unrecognizable fluids</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash_Damage</defName>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">damaged_inf(p=4)->smash</li>
        <li ListIndex="1">damaged_inf->bash</li>
        <li ListIndex="2">damaged_inf->clobber</li>
        <li ListIndex="3">damaged_inf->slam</li>
        <li ListIndex="4">damaged_inf->strike</li>
        <li ListIndex="5">damaged_past(p=4)->smashed</li>
        <li ListIndex="6">damaged_past->bashed</li>
        <li ListIndex="7">damaged_past->clobbered</li>
        <li ListIndex="8">damaged_past->slammed</li>
        <li ListIndex="9">damaged_past->struck</li>
        <li ListIndex="10">damaged_present->smashing</li>
        <li ListIndex="11">damaged_present->bashing</li>
        <li ListIndex="12">damaged_present->clobbering</li>
        <li ListIndex="13">damaged_present->bruising</li>
        <li ListIndex="14">damaged_present->lacerating</li>
        <li ListIndex="15">destroyed_past->shattered</li>
        <li ListIndex="16">destroyed_past->crushed</li>
        <li ListIndex="17">destroyed_past->obliterated</li>
        <li ListIndex="18">destroyed_past->annihilated</li>
        <li ListIndex="19">destroyed_past->broke</li>
        <li ListIndex="20">destroyed_present->shattering</li>
        <li ListIndex="21">destroyed_present->crushing</li>
        <li ListIndex="22">destroyed_present->obliterating</li>
        <li ListIndex="23">destroyed_present->annihilating</li>
        <li ListIndex="24">destroyed_present->breaking</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Smash</defName>
    <include>
      <li ListIndex="0">Maneuver_Smash_Damage</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
        <li ListIndex="1">flavortextconsequence->leaving the area visibly deformed</li>
        <li ListIndex="2">flavortextconsequence->knocking [recipient_objective] off balance</li>
        <li ListIndex="3">flavortextconsequence->knocking [recipient_objective] to the side</li>
        <li ListIndex="4">destroyed_suffix->[to] pieces</li>
        <li ListIndex="5">destroyed_suffix->[to] bits</li>
        <li ListIndex="6">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
        <li ListIndex="7">destroyed_suffix->[to] fragments</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Scratch_Damage</defName>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">damaged_inf(p=4)->scratch</li>
        <li ListIndex="1">damaged_inf->lacerate</li>
        <li ListIndex="2">damaged_inf->tear</li>
        <li ListIndex="3">damaged_inf->cut</li>
        <li ListIndex="4">damaged_past(p=4)->scratched</li>
        <li ListIndex="5">damaged_past->lacerated</li>
        <li ListIndex="6">damaged_past->tore</li>
        <li ListIndex="7">damaged_past->cut</li>
        <li ListIndex="8">damaged_present->scratching</li>
        <li ListIndex="9">damaged_present->lacerating</li>
        <li ListIndex="10">damaged_present->tearing</li>
        <li ListIndex="11">damaged_present->cutting</li>
        <li ListIndex="12">destroyed_past->mauled</li>
        <li ListIndex="13">destroyed_past->lacerated</li>
        <li ListIndex="14">destroyed_past->tore off</li>
        <li ListIndex="15">destroyed_past->shredded</li>
        <li ListIndex="16">destroyed_past->ripped</li>
        <li ListIndex="17">destroyed_present->mauling</li>
        <li ListIndex="18">destroyed_present->lacerating</li>
        <li ListIndex="19">destroyed_present->tearing off</li>
        <li ListIndex="20">destroyed_present->shredding</li>
        <li ListIndex="21">destroyed_present->ripping</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Maneuver_Scratch</defName>
    <include>
      <li ListIndex="0">Maneuver_Scratch_Damage</li>
    </include>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">woundname->wound</li>
        <li ListIndex="1">woundname(p=0.3)->opening</li>
        <li ListIndex="2">flavortextsituation(recipient_flesh!=Mechanoid)->with blood dripping from the [woundname]</li>
        <li ListIndex="3">flavortextsituation->with fluids dripping from the [woundname]</li>
        <li ListIndex="4">flavortextconsequence(recipient_flesh!=Mechanoid)->and exposing the flesh underneath</li>
        <li ListIndex="5">flavortextconsequence(recipient_flesh==Mechanoid)->and exposing the machinery underneath</li>
        <li ListIndex="6">flavortextconsequence(recipient_flesh!=Mechanoid)->and leaving a gory [woundname]</li>
        <li ListIndex="7">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
        <li ListIndex="8">destroyed_suffix->[to] strips</li>
        <li ListIndex="9">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy pieces</li>
        <li ListIndex="10">destroyed_suffix->[to] pieces</li>
        <li ListIndex="11">destroyed_suffix->[to] fragments</li>
        <li ListIndex="12">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a pile of gore</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Poke</defName>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">damaged_inf(p=2)->poke</li>
        <li ListIndex="1">damaged_inf(p=2)->jab</li>
        <li ListIndex="2">damaged_inf->prod</li>
        <li ListIndex="3">damaged_inf->shove</li>
        <li ListIndex="4">damaged_inf->stab</li>
        <li ListIndex="5">damaged_past(p=2)->poked</li>
        <li ListIndex="6">damaged_past(p=2)->jabbed</li>
        <li ListIndex="7">damaged_past->prodded</li>
        <li ListIndex="8">damaged_past->shoved</li>
        <li ListIndex="9">damaged_past->stabbed</li>
        <li ListIndex="10">maneuver_present(p=2)->poking</li>
        <li ListIndex="11">maneuver_present(p=2)->jabbing</li>
        <li ListIndex="12">maneuver_present->prodding</li>
        <li ListIndex="13">maneuver_present->shoving</li>
        <li ListIndex="14">maneuver_present->stabbing</li>
        <li ListIndex="15">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving an enormous bruise</li>
        <li ListIndex="16">flavortextconsequence->leaving the area visibly deformed</li>
        <li ListIndex="17">flavortextconsequence->knocking [recipient_objective] off balance</li>
        <li ListIndex="18">flavortextconsequence->knocking [recipient_objective] to the side</li>
        <li ListIndex="19">destroyed_past->shattered</li>
        <li ListIndex="20">destroyed_past->crushed</li>
        <li ListIndex="21">destroyed_past->obliterated</li>
        <li ListIndex="22">destroyed_past->annihilated</li>
        <li ListIndex="23">destroyed_past->broke</li>
        <li ListIndex="24">destroyed_present->shattering</li>
        <li ListIndex="25">destroyed_present->crushing</li>
        <li ListIndex="26">destroyed_present->obliterating</li>
        <li ListIndex="27">destroyed_present->annihilating</li>
        <li ListIndex="28">destroyed_present->breaking</li>
        <li ListIndex="29">destroyed_suffix->[to] pieces</li>
        <li ListIndex="30">destroyed_suffix->[to] bits</li>
        <li ListIndex="31">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] a fine mist</li>
        <li ListIndex="32">destroyed_suffix->[to] fragments</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
  <RulePackDef>
    <defName>Bite</defName>
    <rulePack>
      <rulesStrings>
        <li ListIndex="0">damaged_inf->bite</li>
        <li ListIndex="1">damaged_inf->chomp</li>
        <li ListIndex="2">damaged_inf(p=0.5)->nip</li>
        <li ListIndex="3">damaged_past->bit</li>
        <li ListIndex="4">damaged_past->chomped</li>
        <li ListIndex="5">damaged_past->nipped</li>
        <li ListIndex="6">damaged_past->gnawed</li>
        <li ListIndex="7">damaged_past->tore</li>
        <li ListIndex="8">maneuver_present->biting</li>
        <li ListIndex="9">maneuver_present->chomping</li>
        <li ListIndex="10">maneuver_present->nipped</li>
        <li ListIndex="11">maneuver_present->gnawing</li>
        <li ListIndex="12">maneuver_present->tearing</li>
        <li ListIndex="13">flavortextconsequence(recipient_flesh!=Mechanoid)->exposing the flesh underneath</li>
        <li ListIndex="14">flavortextconsequence(recipient_flesh==Mechanoid)->exposing the machinery underneath</li>
        <li ListIndex="15">flavortextconsequence(recipient_flesh!=Mechanoid)->leaving grisly tears in the skin</li>
        <li ListIndex="16">flavortextconsequence(recipient_flesh==Mechanoid)->leaving grisly tears in the metal</li>
        <li ListIndex="17">destroyed_past->devoured</li>
        <li ListIndex="18">destroyed_past->separated</li>
        <li ListIndex="19">destroyed_past->ripped</li>
        <li ListIndex="20">destroyed_past->ravaged</li>
        <li ListIndex="21">destroyed_present->devouring</li>
        <li ListIndex="22">destroyed_present->separating</li>
        <li ListIndex="23">destroyed_present->ripping</li>
        <li ListIndex="24">destroyed_present->ravaging</li>
        <li ListIndex="25">destroyed_suffix->[to] shreds</li>
        <!-- How's his wife holding up? -->
        <li ListIndex="26">destroyed_suffix->[to] pieces</li>
        <li ListIndex="27">destroyed_suffix->[to] strips</li>
        <li ListIndex="28">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] messy strips</li>
        <li ListIndex="29">destroyed_suffix(recipient_flesh!=Mechanoid)->[to] an unrecognizable mess</li>
      </rulesStrings>
    </rulePack>
  </RulePackDef>
</Defs>